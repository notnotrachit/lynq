{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_20-73fa848ade1e83af161cd8caed90e1b0df28f159",
  "solcVersion": "0.8.20",
  "solcLongVersion": "0.8.20+commit.a1b79de6",
  "userSourceNameMap": {
    "contracts/SocialLinking.sol": "project/contracts/SocialLinking.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "shanghai",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contracts/SocialLinking.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\n/**\n * @title SocialLinking\n * @dev Social media linking and token transfer contract for PYUSD on Base\n */\ncontract SocialLinking is Ownable, ReentrancyGuard {\n    IERC20 public immutable pyusdToken;\n\n    struct SocialLink {\n        address owner;\n        string twitter;\n        string instagram;\n        string linkedin;\n    }\n\n    struct PendingClaim {\n        string socialHandle;\n        uint256 amount;\n        bool claimed;\n        uint256 paymentCount;\n    }\n\n    struct PaymentRecord {\n        address sender;\n        string socialHandle;\n        uint256 amount;\n        uint256 timestamp;\n        bool claimed;\n    }\n\n    // Mappings\n    mapping(address => SocialLink) public socialLinks;\n    mapping(string => PendingClaim) public pendingClaims;\n    mapping(bytes32 => PaymentRecord) public paymentRecords;\n    \n    // Events\n    event TwitterLinked(address indexed user, string handle);\n    event InstagramLinked(address indexed user, string handle);\n    event LinkedInLinked(address indexed user, string handle);\n    event TokenSent(address indexed from, address indexed to, uint256 amount);\n    event TokenSentToUnlinked(address indexed from, string socialHandle, uint256 amount, uint256 paymentIndex);\n    event TokenClaimed(address indexed claimer, string socialHandle, uint256 amount);\n\n    constructor(address _pyusdToken) Ownable(msg.sender) {\n        require(_pyusdToken != address(0), \"Invalid PYUSD token address\");\n        pyusdToken = IERC20(_pyusdToken);\n    }\n\n    /**\n     * @dev Link Twitter account to wallet\n     */\n    function linkTwitter(address user, string calldata twitterHandle) external onlyOwner {\n        require(bytes(twitterHandle).length > 0 && bytes(twitterHandle).length <= 30, \"Invalid handle length\");\n        \n        if (socialLinks[user].owner == address(0)) {\n            socialLinks[user].owner = user;\n        }\n        socialLinks[user].twitter = twitterHandle;\n        \n        emit TwitterLinked(user, twitterHandle);\n    }\n\n    /**\n     * @dev Link Instagram account to wallet\n     */\n    function linkInstagram(address user, string calldata instagramHandle) external onlyOwner {\n        require(bytes(instagramHandle).length > 0 && bytes(instagramHandle).length <= 30, \"Invalid handle length\");\n        \n        if (socialLinks[user].owner == address(0)) {\n            socialLinks[user].owner = user;\n        }\n        socialLinks[user].instagram = instagramHandle;\n        \n        emit InstagramLinked(user, instagramHandle);\n    }\n\n    /**\n     * @dev Link LinkedIn account to wallet\n     */\n    function linkLinkedIn(address user, string calldata linkedinHandle) external onlyOwner {\n        require(bytes(linkedinHandle).length > 0 && bytes(linkedinHandle).length <= 30, \"Invalid handle length\");\n        \n        if (socialLinks[user].owner == address(0)) {\n            socialLinks[user].owner = user;\n        }\n        socialLinks[user].linkedin = linkedinHandle;\n        \n        emit LinkedInLinked(user, linkedinHandle);\n    }\n\n    /**\n     * @dev Send PYUSD tokens directly to a linked wallet\n     */\n    function sendToken(address recipient, uint256 amount) external nonReentrant {\n        require(amount > 0, \"Amount must be greater than 0\");\n        require(recipient != address(0), \"Invalid recipient\");\n        \n        bool success = pyusdToken.transferFrom(msg.sender, recipient, amount);\n        require(success, \"Token transfer failed\");\n        \n        emit TokenSent(msg.sender, recipient, amount);\n    }\n\n    /**\n     * @dev Send PYUSD tokens to an unlinked social handle (held in escrow)\n     */\n    function sendTokenToUnlinked(\n        string calldata socialHandle,\n        uint256 amount,\n        uint256 paymentIndex\n    ) external nonReentrant {\n        require(amount > 0, \"Amount must be greater than 0\");\n        require(bytes(socialHandle).length > 0 && bytes(socialHandle).length <= 30, \"Invalid handle length\");\n        \n        // Transfer tokens to this contract (escrow)\n        bool success = pyusdToken.transferFrom(msg.sender, address(this), amount);\n        require(success, \"Token transfer failed\");\n        \n        // Update or create pending claim\n        PendingClaim storage claim = pendingClaims[socialHandle];\n        \n        if (claim.claimed || claim.amount == 0) {\n            // Initialize new claim\n            claim.socialHandle = socialHandle;\n            claim.amount = amount;\n            claim.claimed = false;\n            claim.paymentCount = 1;\n        } else {\n            // Accumulate to existing claim\n            claim.amount += amount;\n            claim.paymentCount += 1;\n        }\n        \n        // Create payment record\n        bytes32 recordKey = keccak256(abi.encodePacked(socialHandle, paymentIndex));\n        paymentRecords[recordKey] = PaymentRecord({\n            sender: msg.sender,\n            socialHandle: socialHandle,\n            amount: amount,\n            timestamp: block.timestamp,\n            claimed: false\n        });\n        \n        emit TokenSentToUnlinked(msg.sender, socialHandle, amount, paymentIndex);\n    }\n\n    /**\n     * @dev Claim tokens sent to a social handle\n     */\n    function claimToken(string calldata socialHandle) external nonReentrant {\n        PendingClaim storage claim = pendingClaims[socialHandle];\n        \n        require(!claim.claimed, \"Already claimed\");\n        require(claim.amount > 0, \"No pending claim\");\n        \n        // Verify caller has linked this social handle\n        SocialLink storage link = socialLinks[msg.sender];\n        require(\n            keccak256(bytes(link.twitter)) == keccak256(bytes(socialHandle)) ||\n            keccak256(bytes(link.instagram)) == keccak256(bytes(socialHandle)) ||\n            keccak256(bytes(link.linkedin)) == keccak256(bytes(socialHandle)),\n            \"Social handle not linked to your wallet\"\n        );\n        \n        uint256 amount = claim.amount;\n        claim.claimed = true;\n        \n        // Transfer tokens from contract to claimer\n        bool success = pyusdToken.transfer(msg.sender, amount);\n        require(success, \"Token transfer failed\");\n        \n        emit TokenClaimed(msg.sender, socialHandle, amount);\n    }\n\n    /**\n     * @dev Get social link for a user\n     */\n    function getSocialLink(address user) external view returns (SocialLink memory) {\n        return socialLinks[user];\n    }\n\n    /**\n     * @dev Get pending claim for a social handle\n     */\n    function getPendingClaim(string calldata socialHandle) external view returns (PendingClaim memory) {\n        return pendingClaims[socialHandle];\n    }\n\n    /**\n     * @dev Get payment record\n     */\n    function getPaymentRecord(string calldata socialHandle, uint256 paymentIndex) external view returns (PaymentRecord memory) {\n        bytes32 recordKey = keccak256(abi.encodePacked(socialHandle, paymentIndex));\n        return paymentRecords[recordKey];\n    }\n\n    /**\n     * @dev Emergency withdraw function (only owner)\n     */\n    function emergencyWithdraw(uint256 amount) external onlyOwner {\n        require(amount > 0, \"Amount must be greater than 0\");\n        bool success = pyusdToken.transfer(owner(), amount);\n        require(success, \"Token transfer failed\");\n    }\n}\n"
      }
    }
  }
}